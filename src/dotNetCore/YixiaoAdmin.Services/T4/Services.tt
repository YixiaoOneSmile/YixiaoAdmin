<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="$(SolutionDir)\YixiaoAdmin.Models\bin\Debug\netstandard2.0\YixiaoAdmin.Models.dll" #>
<#@ import namespace="YixiaoAdmin.Models" #>
<#@ output extension=".cs" #>
<#@include file="$(SolutionDir)\packages\MultipleOutputHelper.ttinclude"#> 

<#
    //var OutputPath1 = Path.GetDirectoryName(Host.TemplateFile)+"\\work";
    var OutputPath1 = Path.GetDirectoryName(Host.TemplateFile);
    if (!Directory.Exists(OutputPath1))
    {
        Directory.CreateDirectory(OutputPath1);
    }
    var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = OutputPath1 }; 
    var assembly = typeof(IEntity).Assembly.GetTypes().AsEnumerable()
        .Where(x => typeof(IEntity).IsAssignableFrom(x) && !x.IsAbstract && !x.IsInterface).ToList();
    foreach(var type in assembly)
    {
        // 定义输出文件
	    manager.StartBlock(type.Name+"Services.cs");
#>
/****************************************************
 * 本文件由T4模板生成，重新生成T4模板后会导致代码丢失
 * 如需修改请使用partial关键词
 * 文件名：<#=type.Name #>Services.cs
****************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using YixiaoAdmin.Models;
using YixiaoAdmin.IServices;
using YixiaoAdmin.IRepository;
using System.Threading.Tasks;
using System.Linq.Expressions;
using System.Linq;
using YixiaoAdmin.Common;

namespace YixiaoAdmin.Services
{

    public partial class  <#=type.Name #>Services:BaseServices<<#=type.Name #>>, I<#=type.Name #>Services
    {
        private I<#=type.Name #>Repository _<#=type.Name #>Repository;
        public <#=type.Name #>Services(I<#=type.Name #>Repository <#=type.Name #>Repository)
        {
            this._<#=type.Name #>Repository = <#=type.Name #>Repository;
            base.baseRepository = _<#=type.Name #>Repository;
        }
        public async Task<PagesResponse> QueryPages(QueryPageModel queryPageModel)
        {
             //自定义分页Response
            PagesResponse pagesResponse = new PagesResponse();
            //初始化查询表达式
            Expression<Func<<#=type.Name #>, bool>> whereExpression = PredicateBuilder.True<<#=type.Name #>>();
            //判断是否存在查询条件
            if (queryPageModel.Query != null)
            {
                foreach (QueryFieldModel item in queryPageModel.Query)
                {
                    //根据属性名获取属性
                    var property = typeof(<#=type.Name #>).GetProperty(item.QueryField);
                    if (property == null)
                    {
                        continue;
                    }
                    if (item.QueryStr == null || item.QueryStr == "")
                    {
                        continue;
                    }
                    if (item.QueryField == "Name")
                    {

                        whereExpression = PredicateBuilder.And(whereExpression, (x) => x.Name .Contains( item.QueryStr));
                    }

                    else if (item.QueryField == "CreateTime")
                    {
                        whereExpression = PredicateBuilder.And(whereExpression, (x) => x.CreateTime.Date==Convert.ToDateTime(item.QueryStr.Trim()));
                    }

                    else if (item.QueryField == "Id")
                    {
                        whereExpression = PredicateBuilder.And(whereExpression, (x) => x.Id.Contains(item.QueryStr));
                    }

                }
            }
            pagesResponse.Success((await _<#=type.Name #>Repository.Query(whereExpression, queryPageModel.Orderby, queryPageModel.CurrentPage, queryPageModel.PageNumber)).ToList());
            pagesResponse.count = (await _<#=type.Name #>Repository.Query(whereExpression)).Count();
            return pagesResponse;
           
        }
    }
}
<#
     // 结束输出文件
    manager.EndBlock();
    } 
    // 执行编译
    manager.Process(true);  

#>
